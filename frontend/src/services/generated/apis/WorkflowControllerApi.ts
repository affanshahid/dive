/* tslint:disable */
/* eslint-disable */
/**
 * Dive API
 * DIVE api documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  CreateWorkflowDTO,
  CreateWorkflowDTOFromJSON,
  CreateWorkflowDTOToJSON,
  UpdateWorkflowDTO,
  UpdateWorkflowDTOFromJSON,
  UpdateWorkflowDTOToJSON,
  WorkflowDTO,
  WorkflowDTOFromJSON,
  WorkflowDTOToJSON,
  WorkflowDTOSummary,
  WorkflowDTOSummaryFromJSON,
  WorkflowDTOSummaryToJSON,
} from '../models';

export interface DeleteRequest {
  id: string;
}

export interface CreateRequest {
  createWorkflowDTO: CreateWorkflowDTO;
}

export interface FindByIdRequest {
  id: string;
}

export interface UpdateRequest {
  id: string;
  updateWorkflowDTO: UpdateWorkflowDTO;
}

/**
 *
 */
export class WorkflowControllerApi extends runtime.BaseAPI {
  /**
   */
  async _deleteRaw(
    requestParameters: DeleteRequest
  ): Promise<runtime.ApiResponse<WorkflowDTO>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling _delete.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/api/workflows/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkflowDTOFromJSON(jsonValue)
    );
  }

  /**
   */
  async _delete(requestParameters: DeleteRequest): Promise<WorkflowDTO> {
    const response = await this._deleteRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async createRaw(
    requestParameters: CreateRequest
  ): Promise<runtime.ApiResponse<WorkflowDTO>> {
    if (
      requestParameters.createWorkflowDTO === null ||
      requestParameters.createWorkflowDTO === undefined
    ) {
      throw new runtime.RequiredError(
        'createWorkflowDTO',
        'Required parameter requestParameters.createWorkflowDTO was null or undefined when calling create.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/api/workflows`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateWorkflowDTOToJSON(requestParameters.createWorkflowDTO),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkflowDTOFromJSON(jsonValue)
    );
  }

  /**
   */
  async create(requestParameters: CreateRequest): Promise<WorkflowDTO> {
    const response = await this.createRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async findAllRaw(): Promise<runtime.ApiResponse<Array<WorkflowDTOSummary>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/api/workflows`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(WorkflowDTOSummaryFromJSON)
    );
  }

  /**
   */
  async findAll(): Promise<Array<WorkflowDTOSummary>> {
    const response = await this.findAllRaw();
    return await response.value();
  }

  /**
   */
  async findByIdRaw(
    requestParameters: FindByIdRequest
  ): Promise<runtime.ApiResponse<WorkflowDTO>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling findById.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/api/workflows/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkflowDTOFromJSON(jsonValue)
    );
  }

  /**
   */
  async findById(requestParameters: FindByIdRequest): Promise<WorkflowDTO> {
    const response = await this.findByIdRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async updateRaw(
    requestParameters: UpdateRequest
  ): Promise<runtime.ApiResponse<WorkflowDTO>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling update.'
      );
    }

    if (
      requestParameters.updateWorkflowDTO === null ||
      requestParameters.updateWorkflowDTO === undefined
    ) {
      throw new runtime.RequiredError(
        'updateWorkflowDTO',
        'Required parameter requestParameters.updateWorkflowDTO was null or undefined when calling update.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/api/workflows/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(requestParameters.id))
      ),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: UpdateWorkflowDTOToJSON(requestParameters.updateWorkflowDTO),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      WorkflowDTOFromJSON(jsonValue)
    );
  }

  /**
   */
  async update(requestParameters: UpdateRequest): Promise<WorkflowDTO> {
    const response = await this.updateRaw(requestParameters);
    return await response.value();
  }
}
