/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
/**
 *
 * @export
 * @interface JsonSchema
 */
export interface JsonSchema {
  /**
   *
   * @type {string}
   * @memberof JsonSchema
   */
  $ref?: string;
  /**
   *
   * @type {string}
   * @memberof JsonSchema
   */
  $schema?: string;
  /**
   *
   * @type {string}
   * @memberof JsonSchema
   */
  description?: string;
  /**
   *
   * @type {Array<JsonSchema>}
   * @memberof JsonSchema
   */
  disallow?: Array<JsonSchema>;
  /**
   *
   * @type {Array<JsonSchema>}
   * @memberof JsonSchema
   */
  _extends?: Array<JsonSchema>;
  /**
   *
   * @type {string}
   * @memberof JsonSchema
   */
  id?: string;
  /**
   *
   * @type {boolean}
   * @memberof JsonSchema
   */
  readonly?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof JsonSchema
   */
  required?: boolean;
}

export function JsonSchemaFromJSON(json: any): JsonSchema {
  return JsonSchemaFromJSONTyped(json, false);
}

export function JsonSchemaFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): JsonSchema {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    $ref: !exists(json, "$ref") ? undefined : json["$ref"],
    $schema: !exists(json, "$schema") ? undefined : json["$schema"],
    description: !exists(json, "description") ? undefined : json["description"],
    disallow: !exists(json, "disallow")
      ? undefined
      : (json["disallow"] as Array<any>).map(JsonSchemaFromJSON),
    _extends: !exists(json, "extends")
      ? undefined
      : (json["extends"] as Array<any>).map(JsonSchemaFromJSON),
    id: !exists(json, "id") ? undefined : json["id"],
    readonly: !exists(json, "readonly") ? undefined : json["readonly"],
    required: !exists(json, "required") ? undefined : json["required"],
  };
}

export function JsonSchemaToJSON(value?: JsonSchema | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    $ref: value.$ref,
    $schema: value.$schema,
    description: value.description,
    disallow:
      value.disallow === undefined
        ? undefined
        : (value.disallow as Array<any>).map(JsonSchemaToJSON),
    extends:
      value._extends === undefined
        ? undefined
        : (value._extends as Array<any>).map(JsonSchemaToJSON),
    id: value.id,
    readonly: value.readonly,
    required: value.required,
  };
}
